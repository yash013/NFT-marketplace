{"ast":null,"code":"const [dataFetched, updateFetched] = useState(false);\nasync function getAllNFTs() {\n  const ethers = require(\"ethers\");\n  //After adding your Hardhat network to your metamask, this code will get providers and signers\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  //Pull the deployed contract instance\n  let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer);\n  //create an NFT Token\n  let transaction = await contract.getAllNFTs();\n\n  //Fetch all the details of every NFT from the contract and display\n  const items = await Promise.all(transaction.map(async i => {\n    const tokenURI = await contract.tokenURI(i.tokenId);\n    let meta = await axios.get(tokenURI);\n    meta = meta.data;\n    let price = ethers.utils.formatUnits(i.price.toString(), 'ether');\n    let item = {\n      price,\n      tokenId: i.tokenId.toNumber(),\n      seller: i.seller,\n      owner: i.owner,\n      image: meta.image,\n      name: meta.name,\n      description: meta.description\n    };\n    return item;\n  }));\n  updateFetched(true);\n  updateData(items);\n}\nif (!dataFetched) getAllNFTs();","map":{"version":3,"names":["dataFetched","updateFetched","useState","getAllNFTs","ethers","require","provider","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","MarketplaceJSON","address","abi","transaction","items","Promise","all","map","i","tokenURI","tokenId","meta","axios","get","data","price","utils","formatUnits","toString","item","toNumber","seller","owner","image","name","description","updateData"],"sources":["E:/Road_to_web3/RTW3-Week7-NFT-Marketplace/src/components/Marketplace.js"],"sourcesContent":["const [dataFetched, updateFetched] = useState(false);\r\n\r\nasync function getAllNFTs() {\r\n    const ethers = require(\"ethers\");\r\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    const signer = provider.getSigner();\r\n    //Pull the deployed contract instance\r\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer)\r\n    //create an NFT Token\r\n    let transaction = await contract.getAllNFTs()\r\n\r\n    //Fetch all the details of every NFT from the contract and display\r\n    const items = await Promise.all(transaction.map(async i => {\r\n        const tokenURI = await contract.tokenURI(i.tokenId);\r\n        let meta = await axios.get(tokenURI);\r\n        meta = meta.data;\r\n\r\n        let price = ethers.utils.formatUnits(i.price.toString(), 'ether');\r\n        let item = {\r\n            price,\r\n            tokenId: i.tokenId.toNumber(),\r\n            seller: i.seller,\r\n            owner: i.owner,\r\n            image: meta.image,\r\n            name: meta.name,\r\n            description: meta.description,\r\n        }\r\n        return item;\r\n    }))\r\n\r\n    updateFetched(true);\r\n    updateData(items);\r\n}\r\n\r\nif(!dataFetched)\r\n    getAllNFTs();"],"mappings":"AAAA,MAAM,CAACA,WAAW,EAAEC,aAAa,CAAC,GAAGC,QAAQ,CAAC,KAAK,CAAC;AAEpD,eAAeC,UAAU,GAAG;EACxB,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;EAChC;EACA,MAAMC,QAAQ,GAAG,IAAIF,MAAM,CAACG,SAAS,CAACC,YAAY,CAACC,MAAM,CAACC,QAAQ,CAAC;EACnE,MAAMC,MAAM,GAAGL,QAAQ,CAACM,SAAS,EAAE;EACnC;EACA,IAAIC,QAAQ,GAAG,IAAIT,MAAM,CAACU,QAAQ,CAACC,eAAe,CAACC,OAAO,EAAED,eAAe,CAACE,GAAG,EAAEN,MAAM,CAAC;EACxF;EACA,IAAIO,WAAW,GAAG,MAAML,QAAQ,CAACV,UAAU,EAAE;;EAE7C;EACA,MAAMgB,KAAK,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACH,WAAW,CAACI,GAAG,CAAC,MAAMC,CAAC,IAAI;IACvD,MAAMC,QAAQ,GAAG,MAAMX,QAAQ,CAACW,QAAQ,CAACD,CAAC,CAACE,OAAO,CAAC;IACnD,IAAIC,IAAI,GAAG,MAAMC,KAAK,CAACC,GAAG,CAACJ,QAAQ,CAAC;IACpCE,IAAI,GAAGA,IAAI,CAACG,IAAI;IAEhB,IAAIC,KAAK,GAAG1B,MAAM,CAAC2B,KAAK,CAACC,WAAW,CAACT,CAAC,CAACO,KAAK,CAACG,QAAQ,EAAE,EAAE,OAAO,CAAC;IACjE,IAAIC,IAAI,GAAG;MACPJ,KAAK;MACLL,OAAO,EAAEF,CAAC,CAACE,OAAO,CAACU,QAAQ,EAAE;MAC7BC,MAAM,EAAEb,CAAC,CAACa,MAAM;MAChBC,KAAK,EAAEd,CAAC,CAACc,KAAK;MACdC,KAAK,EAAEZ,IAAI,CAACY,KAAK;MACjBC,IAAI,EAAEb,IAAI,CAACa,IAAI;MACfC,WAAW,EAAEd,IAAI,CAACc;IACtB,CAAC;IACD,OAAON,IAAI;EACf,CAAC,CAAC,CAAC;EAEHjC,aAAa,CAAC,IAAI,CAAC;EACnBwC,UAAU,CAACtB,KAAK,CAAC;AACrB;AAEA,IAAG,CAACnB,WAAW,EACXG,UAAU,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}